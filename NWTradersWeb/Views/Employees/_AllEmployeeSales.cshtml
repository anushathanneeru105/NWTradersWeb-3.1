@using NWTradersWeb.Models;
@model IEnumerable<EmployeeSales>

@{
    List<string> years = ViewBag.Years;
    years.Insert(0, "All Years");

    string year = ViewBag.Year;
}

<div id="EmployeeSales">

    <div class="navbar  shadow small">
        <!-- Select Year-->
        <div class="input-group-sm p-2">
            <div class="">Fiscal Year</div>
            @Html.DropDownList("Year", new SelectList(years),
                 new
                 {
                     @class = "custom-select",
                     @id = "SelectYear",
                     @value = year,
                     onchange = "RefreshPage();"
                 })
        </div>

        <div>
            <h5> Sales Revenue for All Employees in @ViewBag.Year </h5>
        </div>

    </div>

    <div class="nav py-4">
        <h6 class="" id="Header">
        </h6>
    </div>
    <div class=" pt-4 row" style="min-height:350px">


        <div class="col-4 small" id="Table">

        </div>

        <div class="col-8" id="Chart">

        </div>
    </div>

</div>



<script type="">

    $(document).ready(function () {

        google.charts.setOnLoadCallback(DrawEmployeeSalesChart('Chart'));

        function DrawEmployeeSalesChart(divName)
        {
            $(function () {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetAllEmployeeSales", "Employees")',
                    data: { Year: '@year' },
                    success: function (chartsdata)
                    {
                        var Data = chartsdata.JSONList;
                        if (Data.length > 0) {
                            var data = new google.visualization.DataTable();
                            var dataForTable = new google.visualization.DataTable();

                            data.addColumn('string', 'Employee');
                            data.addColumn('number', 'Sales');

                            dataForTable.addColumn('string', 'Employee');
                            dataForTable.addColumn('number', 'Sales');

                            //Loop through each element in the list data
                            for (var i = 0; i < Data.length; i++) {

                                data.addRow([
                                    Data[i].theEmployee,
                                    Data[i].Sales,
                                ]);

                                dataForTable.addRow([
                                    Data[i].theEmployee,
                                    Data[i].Sales
                                ]);

                            }

                            // Coloring the columns.
                            var rainbow = new Rainbow();
                            if (Data.length > 1) {
                                rainbow.setNumberRange(1, data.getNumberOfRows());
                                rainbow.setSpectrum('steelblue', 'goldenrod');

                                //Add a column to specify the color
                                data.addColumn({ 'type': 'string', 'role': 'style' });

                                // for each row in the datatable, add a new color by asking "rainbow" for a color.
                                for (var i = 0; i < data.getNumberOfRows(); i++) {
                                    data.setCell(i, 2, '' + rainbow.colorAt(i + 1) + '');
                                }

                                var view = new google.visualization.DataView(data);
                                view.setColumns(
                                    [0, 1, 2,
                                        { calc: "stringify", sourceColumn: 1, type: "string", role: "annotation" }]);
                            }
                            else {
                                var view = new google.visualization.DataView(data);
                                view.setColumns(
                                    [0, 1, 
                                        { calc: "stringify", sourceColumn: 1, type: "string", role: "annotation" }]);

                            }

                            var formatter = new google.visualization.NumberFormat(
                                { pattern: "$ #,##0" });

                            // Apply formatter to second column
                            formatter.format(data, 1);
                            formatter.format(dataForTable, 1); // Apply formatter to second column


                            var columnChartOptions =
                            {
                                title: 'Sales Revenue in ' + '@year',
                                titleTextStyle: { fontSize: 18 },
                                titlePosition: 'top',
                                fontName: 'Tahoma',
                                dataOpacity: 0.8,
                                legend: { position: "none" },

                                vAxis:
                                {
                                    title: 'Sales ($)',
                                    titleTextStyle: { fontSize: 14, italic: false },
                                    textStyle: { fontName: 'Tahoma', fontSize: 12, italic: false },
                                    format: 'currency',
                                },
                                hAxis:
                                {
                                    title: 'Employee',
                                    titleTextStyle: { fontSize: 14, italic: false },
                                    textStyle: { fontName: 'Tahoma', fontSize: 12 },
                                },

                            };


                            // Instantiate and draw our chart, passing in options
                            var chartColumns = new google.visualization.ColumnChart(document.getElementById(divName));
                            chartColumns.draw(view, columnChartOptions);

                            // Draw a data table to show the values.
                            var classNames = {
                                tableCell: 'gTableCell',
                                headerRow: 'h5',
                            };

                            var tableOptions = {
                                allowHtml: true,
                                cssClassNames: classNames,
                                width: '100%',
                            };

                            var formatter = new google.visualization.BarFormat();
                            formatter.format(dataForTable, 1);

                            var table = new google.visualization.Table(document.getElementById('Table'));
                            table.draw(dataForTable, tableOptions);
                        }
                        else
                        {
                             $("#Header").html('Sales Revenue information is not available' );
                        }
                },

                error: function () { alert("Error loading data! Please try again."); }

            });
        })
    }
    });

</script>

<script type="text/javascript">

    function RefreshPage()
    {
        var year = $('#SelectYear').val();
        $(function () {

            $.ajax({
                type: 'GET',
                url: '@Url.Action("AllEmployeeSales", "Employees")',
                data: { Year: year },

                success: function (partialViewResult)
                { $("#EmployeeSales").html(partialViewResult);}
            });
        })
    }
</script>
